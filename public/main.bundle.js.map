{"version":3,"sources":["/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src async","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/app.component.css","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/app.component.html","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/app.component.ts","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/app.module.ts","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/app.routes.ts","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/login/login.component.css","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/login/login.component.html","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/login/login.component.ts","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/navbar/navbar.component.css","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/navbar/navbar.component.html","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/navbar/navbar.component.ts","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/signup/signup.component.css","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/signup/signup.component.html","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/signup/signup.component.ts","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/models/user.model.ts","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/services/auth.service.ts","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/services/error.service.ts","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/services/users.service.ts","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/shared/equal-validator.directive.ts","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/environments/environment.ts","/Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"../../../../../src async recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src async\n// module id = ../../../../../src async recursive\n// module chunks = 1","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/app.component.css\n// module id = ../../../../../src/app/app.component.css\n// module chunks = 1","module.exports = \"<app-navbar></app-navbar>\\n<router-outlet></router-outlet>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/app.component.html\n// module id = ../../../../../src/app/app.component.html\n// module chunks = 1","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'app/services/auth.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  constructor(private Auth: AuthService) {\n\n  }\n\n  ngOnInit() {\n    \n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n// import Components\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { SignupComponent } from './components/signup/signup.component';\n\n// import Services\nimport { AuthService } from './services/auth.service';\nimport { ErrorService } from './services/error.service';\nimport { UsersService } from './services/users.service';\n\n// import routing\nimport { routing } from 'app/app.routes';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    NavbarComponent,\n    SignupComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpModule,\n    routing\n  ],\n  providers: [\n    AuthService,\n    ErrorService,\n    UsersService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/app.module.ts","import { Routes, RouterModule } from '@angular/router';\nimport { AppComponent } from 'app/app.component';\nimport { LoginComponent } from 'app/components/login/login.component';\nimport { SignupComponent } from 'app/components/signup/signup.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        redirectTo: 'login',\n        pathMatch: 'full'\n    },\n    {\n        path: 'login',\n        component: LoginComponent\n    },\n    {\n        path: 'signup',\n        component: SignupComponent\n    },\n    {\n        path: '**',\n        redirectTo: 'login'\n    }\n];\n\nexport const routing = RouterModule.forRoot(routes);\n\n\n// WEBPACK FOOTER //\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/app.routes.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".login-panel {\\n    margin: auto;\\n    width: 40%;\\n}\\n\\n.error-message {\\n    padding-left: 20px;\\n    color: red;\\n}\\n\\nbutton:disabled {\\n  cursor: not-allowed;\\n  pointer-events: all !important;\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/login/login.component.css\n// module id = ../../../../../src/app/components/login/login.component.css\n// module chunks = 1","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"card-panel login-panel\\\">\\n        <form class=\\\"col s12\\\" [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\" novalidate>\\n            <h4 class=\\\"center-align\\\">Login</h4>\\n            <!-- error message -->\\n            <div class=\\\"row\\\" *ngIf=\\\"errors?.summary\\\">\\n              <p class=\\\"error-message\\\">{{ errors.summary }}</p>\\n            </div>\\n            <!-- email -->\\n            <div class=\\\"row\\\">\\n                <div class=\\\"input-field col s12\\\">\\n                    <input \\n                          class=\\\"validate\\\" \\n                          id=\\\"email\\\" \\n                          type=\\\"email\\\" \\n                          name=\\\"email\\\" \\n                          formControlName=\\\"email\\\"\\n                          required />\\n                    <label for='email'>Email</label>\\n                </div>\\n            </div>\\n            <!-- email error message -->\\n            <div class=\\\"row\\\" *ngIf=\\\"email.invalid && (email.dirty || email.touched)\\\">\\n              <p class=\\\"error-message\\\" *ngIf=\\\"email.errors.required\\\">Email is required, please enter your email address.</p>\\n              <p class=\\\"error-message\\\" *ngIf=\\\"email.errors.pattern\\\">Not a valid email address, please enter another one.</p>\\n            </div>\\n            <!-- password -->\\n            <div class=\\\"row\\\">\\n                <div class=\\\"input-field col s12\\\">\\n                    <input \\n                          class=\\\"validate\\\" \\n                          id=\\\"password\\\" \\n                          type=\\\"password\\\" \\n                          name=\\\"password\\\" \\n                          formControlName=\\\"password\\\"\\n                          required/>\\n                    <label for='password'>Password</label>\\n                </div>\\n            </div>\\n            <!-- password error message -->\\n            <div class=\\\"row\\\" *ngIf=\\\"password.invalid && (password.dirty || password.touched)\\\">\\n              <p class=\\\"error-message\\\" *ngIf=\\\"password.errors.required\\\">Password is required, please enter your password.</p>\\n            </div>\\n            <!-- login button -->\\n            <div class=\\\"row right-align\\\">\\n                <button \\n                      type=\\\"submit\\\" \\n                      class=\\\"waves-effect waves-light btn indigo lighten-1\\\" \\n                      [disabled]=\\\"!loginForm.valid\\\">Log in</button>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <p class=\\\"right-align\\\"> New to HiChat?  <a [routerLink]=\\\"['/signup']\\\">Sign Up</a></p>\\n            </div>\\n        </form>\\n    </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/login/login.component.html\n// module id = ../../../../../src/app/components/login/login.component.html\n// module chunks = 1","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from 'app/services/auth.service';\nimport { User } from 'app/models/user.model';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup\n  errors: any\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.loginForm = new FormGroup({\n      email: new FormControl(null, [\n        Validators.required,\n        Validators.pattern(\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\")\n      ]),\n      password: new FormControl(null, Validators.required)\n    });\n  }\n\n  get email() {\n    return this.loginForm.get('email');\n  }\n\n  get password() {\n    return this.loginForm.get('password');\n  }\n\n  onSubmit() {\n    const user = new User(\n      this.loginForm.value.email, \n      this.loginForm.value.password\n    );\n\n    this.authService.login(user)\n        .subscribe(response => {\n          console.log(response);\n            if (response.status === 200) {\n                this.errors = {};\n                \n                this.authService.authenticateUser(response.token, this.loginForm.value.email);\n                \n                // response.json().then(function (json) { // .json() method is an asychronous process\n                //     console.log(json);\n                //     this.authService.authenticateUser(json.token, this.loginForm.value.email,);\n                //     this.context.router.replace('/');\n                // }.bind(this));\n            } else {\n                console.log('Login failed');\n                // response.json().then(function (json) {\n                //     const errors = json.errors ? json.errors: {};\n                //     this.errors.summary = json.message;\n                //     this.setState({ errors });\n                // }.bind(this));\n            }\n        });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/login/login.component.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".nav-wrapper {\\n    background-color: transparent;\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/navbar/navbar.component.css\n// module id = ../../../../../src/app/components/navbar/navbar.component.css\n// module chunks = 1","module.exports = \"<div class=\\\"row\\\">    \\n    <nav class=\\\"nav-bar indigo lighten-1\\\">\\n        <div class=\\\"nav-wrapper\\\">\\n          <div class=\\\"col s12\\\">\\n            <a href=\\\"/\\\" class=\\\"brand-logo\\\">HiChat</a>\\n            <ul id=\\\"nav-mobile\\\" class=\\\"right\\\">\\n              <div *ngIf=\\\"Auth.isUserAuthenticated(); else unAuthenticated\\\">\\n                  <li>{{ Auth.getEmail() }}</li>  \\n                  <li><a [routerLink]=\\\"['/login']\\\" (click)=\\\"logout()\\\">Log out</a></li>\\n              </div>\\n                <!-- User is not login case  -->\\n              <ng-template #unAuthenticated>\\n                  <li><a [routerLink]=\\\"['/login']\\\">Log in</a></li>    \\n                  <li><a [routerLink]=\\\"['/signup']\\\">Sign up</a></li> \\n              </ng-template> \\n            </ul>\\n          </div>\\n        </div>\\n    </nav>\\n    <br/>\\n    \\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/navbar/navbar.component.html\n// module id = ../../../../../src/app/components/navbar/navbar.component.html\n// module chunks = 1","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'app/services/auth.service';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor(private Auth: AuthService) { }\n\n  ngOnInit() {\n    \n  }\n\n  logout() {\n    this.Auth.deauthenticate();\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/navbar/navbar.component.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".login-panel {\\n    margin: auto;\\n    width: 40%;\\n}\\n\\n.error-message {\\n    padding-left: 20px;\\n    color: red;\\n}\\n\\nbutton:disabled {\\n  cursor: not-allowed;\\n  pointer-events: all !important;\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/signup/signup.component.css\n// module id = ../../../../../src/app/components/signup/signup.component.css\n// module chunks = 1","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"card-panel login-panel\\\">\\n        <form class=\\\"col s12\\\" [formGroup]=\\\"signupForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n            <h4 class=\\\"center-align\\\">Sign up</h4>\\n            <!-- error message -->\\n            <div class=\\\"row\\\" *ngIf=\\\"errors?.summary\\\">\\n              <p class=\\\"error-message\\\">{{ errors.summary }}</p>\\n            </div>\\n            \\n            <!-- username -->\\n            <!-- <div class=\\\"row\\\">\\n                <div class=\\\"input-field col s12\\\">\\n                    <input \\n                          class=\\\"validate\\\" \\n                          id=\\\"username\\\" \\n                          type=\\\"text\\\" \\n                          name=\\\"username\\\" \\n                          formControlName=\\\"username\\\" \\n                          required />\\n                    <label for='username'>Username</label>\\n                </div>\\n            </div> -->\\n            <!-- username error message -->\\n            <!-- <div class=\\\"row\\\" *ngIf=\\\"username.invalid && (username.dirty || username.touched)\\\">\\n              <p class=\\\"error-message\\\" *ngIf=\\\"username.errors.required\\\">Username is required, please enter your username.</p>\\n            </div> -->\\n\\n            <!-- email -->\\n            <div class=\\\"row\\\">\\n                <div class=\\\"input-field col s12\\\">\\n                    <input \\n                          class=\\\"validate\\\" \\n                          id=\\\"email\\\" \\n                          type=\\\"email\\\" \\n                          name=\\\"email\\\" \\n                          formControlName=\\\"email\\\"\\n                          required />\\n                    <label for='email'>Email</label>\\n                </div>\\n            </div>\\n            <!-- email error message -->\\n            <div class=\\\"row\\\" *ngIf=\\\"email.invalid && (email.dirty || email.touched)\\\">\\n              <p class=\\\"error-message\\\" *ngIf=\\\"email.errors.required\\\">Email is required, please enter your email address.</p>\\n              <p class=\\\"error-message\\\" *ngIf=\\\"email.errors.pattern\\\">Not a valid email address, please enter another one.</p>\\n            </div>\\n            <!-- password -->\\n            <div class=\\\"row\\\">\\n                <div class=\\\"input-field col s12\\\">\\n                    <input \\n                          class=\\\"validate\\\" \\n                          id=\\\"password\\\" \\n                          type=\\\"password\\\" \\n                          name=\\\"password\\\" \\n                          formControlName=\\\"password\\\" />\\n                    <label for='password'>Password</label>\\n                </div>\\n            </div>\\n            <!-- password error message -->\\n            <div class=\\\"row\\\" *ngIf=\\\"password.invalid && (password.dirty || password.touched)\\\">\\n              <p class=\\\"error-message\\\" *ngIf=\\\"password.errors.required\\\">Password is required, please enter your password.</p>\\n            </div> \\n            <!-- confirm password -->\\n            <div class=\\\"row\\\">\\n                <div class=\\\"input-field col s12\\\">\\n                    <input \\n                          id=\\\"confirm_password\\\" \\n                          type=\\\"password\\\" \\n                          name=\\\"confirm_password\\\" \\n                          class=\\\"validate\\\" \\n                          formControlName=\\\"confirm_password\\\" />\\n                    <label for=\\\"confirm_password\\\">Confirm Password</label>\\n                </div>\\n            </div>\\n            <!-- confirm_password error message -->\\n            <div class=\\\"row\\\" *ngIf=\\\"confirm_password.dirty || confirm_password.touched\\\">\\n                <p class=\\\"error-message\\\" *ngIf=\\\"confirm_password.errors?.required\\\">Confirm password is required, please enter your confirm password.</p>  \\n                <p class=\\\"error-message\\\" *ngIf=\\\"!confirm_password.errors && signupForm.hasError('mismatchedPasswords')\\\">Password not matched.</p>\\n            </div>\\n            <!-- signup button -->\\n            <div class=\\\"row right-align\\\">\\n                <button \\n                        type=\\\"submit\\\"\\n                        id=\\\"signupBtn\\\"\\n                        [disabled]=\\\"!signupForm.valid\\\"\\n                        class=\\\"waves-effect waves-light btn indigo lighten-1\\\">Sign up</button>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <p class=\\\"right-align\\\"> Already have an account?  <a [routerLink]=\\\"['/login']\\\">Login</a></p>\\n            </div>\\n        </form>\\n    </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/signup/signup.component.html\n// module id = ../../../../../src/app/components/signup/signup.component.html\n// module chunks = 1","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from 'app/services/auth.service';\nimport { User } from 'app/models/user.model';\nimport { validateEqualValidator } from 'app/shared/equal-validator.directive';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n  signupForm: FormGroup;\n\n  constructor(\n    private authService: AuthService, \n    private fb: FormBuilder,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.signupForm = this.fb.group({\n      email: new FormControl(null, [\n        Validators.required,\n        Validators.pattern(\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\")\n      ]),\n      password: [null, Validators.required],\n      confirm_password: [null, Validators.required]\n    }, { validator: validateEqualValidator('password', 'confirm_password') });\n    \n  }\n\n  get email() {\n    return this.signupForm.get('email');\n  }\n\n  get password() {\n    return this.signupForm.get('password');\n  }\n\n  get confirm_password() {\n    return this.signupForm.get('confirm_password');\n  }\n\n  onSubmit() {\n    const userInfo = new User(\n      this.signupForm.value.email,\n      this.signupForm.value.password\n    );\n\n    this.authService.signup(userInfo)\n                  .subscribe(() => {\n                    this.router.navigateByUrl('/login');\n                  });\n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/components/signup/signup.component.ts","export class User {\n    constructor(public email: string,\n                public password: string) {}\n}\n\n\n// WEBPACK FOOTER //\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/models/user.model.ts","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\nimport 'rxjs/Rx';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/add/operator/toPromise';\n\nimport { ErrorService } from './error.service';\nimport { User } from '../models/user.model';\n\n@Injectable()\nexport class AuthService {\n\n    constructor(\n      private http: Http, \n      private errorService: ErrorService\n    ) { }\n\n    /**\n     * Register a user.\n     */\n    signup(user: User) {\n        const body = JSON.stringify(user);\n        const headers = new Headers({ \n            'Content-Type': 'application/json'\n        });\n        const options = new RequestOptions({ headers: headers });\n        return this.http.post('api/v1/auth/signup', body, options)\n                        .map((response: Response) => response.json());\n                        // .toPromise()\n                        // .then(function (res) {\n                        //     console.log('signup returned below');\n                        //     console.log(res);\n                        // })\n\n                        // .map((response: Response) => response.json())\n                        // .catch((error: Response) => {\n                        //     this.errorService.handleError(error.json());\n                        //     return Observable.throw(error.json());\n                        // });\n    }\n\n    /**\n     * User login\n     */\n    login(user: User) {\n        const body = JSON.stringify(user);\n        const headers = new Headers({\n            'Content-Type': 'application/json'\n        });\n        const options = new RequestOptions({ headers: headers });\n        return this.http.post('api/v1/auth/login', body, options)\n                        .map((response: Response) => { \n                            let res = response.json();\n                            res.status = response.status;\n                            console.log(res);\n                            return res;\n                        })\n                        // .toPromise()\n                        // .then(function (res) {\n                        //     return res.json();\n                        // })\n    }\n\n    /** \n     * Authenticate a user. Save a token string in localStorage.\n     */\n    authenticateUser(token, email) {\n        localStorage.setItem('token', token);\n        localStorage.setItem('email', email);\n    } \n\n    /**\n     * Check if a user is authenticated.\n     */\n    isUserAuthenticated() {\n        return localStorage.getItem('token') !== null;\n    }\n\n    /**\n     * De-authenticate a user\n     */\n    deauthenticate() {\n        localStorage.removeItem('token');\n        localStorage.removeItem('email');\n    }\n\n    /**\n     * Get token value\n     */\n    getToken() {\n        return localStorage.getItem('token');\n    }\n\n    /**\n     * Get email\n     */\n    getEmail() {\n        return localStorage.getItem('email');\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/services/auth.service.ts","import { Injectable, EventEmitter } from '@angular/core';\nimport { Error } from '../Models/error.model';\n\n@Injectable()\nexport class ErrorService {\n\n  constructor() { }\n\n  errorOccurred = new EventEmitter<Error>();\n\n  handleError(error: any) {\n    console.log(error);\n      // const errorData = new Error(error.title, error.error.message);\n      // this.errorOccurred.emit(errorData);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/services/error.service.ts","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\n\nimport { AuthService } from './auth.service';\nimport { ErrorService } from './error.service';\nimport { User } from '../models/user.model';\n\n@Injectable()\nexport class UsersService {\n\n  constructor(private http: Http, private errorService: ErrorService) { }\n\n  \n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/services/users.service.ts","import { FormControl, FormGroup } from '@angular/forms';\n\nexport function validateEqualValidator(password_key: string, confirm_password_key: string) {\n    return (group: FormGroup): {[key: string]: any} => {\n    let password = group.controls[password_key];\n    let confirm_password = group.controls[confirm_password_key];\n\n    if (password.value !== confirm_password.value) {\n      return {        \n        mismatchedPasswords: true\n      };\n    }\n  }\n}\n\n\n// WEBPACK FOOTER //\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/app/shared/equal-validator.directive.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// /Users/diwang/Documents/bittiger_fullStack/Project/HiChat-Capstone/HiChat-client/src/main.ts"],"sourceRoot":"webpack:///"}